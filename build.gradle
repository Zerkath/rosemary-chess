plugins {
  id 'java'
  id 'jacoco'
  id 'com.diffplug.spotless' version '6.25.0'
  id "me.champeau.jmh" version "0.7.2"
  id 'org.graalvm.buildtools.native' version '0.10.2'
}

repositories {
  mavenCentral()
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(17))
  }
}
graalvmNative {
    binaries {
        main {
            imageName = "rosemary-chess"
            mainClass = "rosemary.Program"
            buildArgs.add("-O4")
            buildArgs.add("-march=native")
            buildArgs.add("--gc=G1")

        }
        test {
            buildArgs.add("-O0")
        }
    }
    binaries.all {
        buildArgs.add("--verbose")
    }
}

tasks.withType(JavaCompile) {
options.encoding = 'UTF-8'
  options.compilerArgs.add('-Xlint:deprecation')
  options.compilerArgs.add('-Xlint:unchecked')
  options.compilerArgs.add('-Xlint:cast')
}

test {
  jvmArgs = ['-Xms512m', '-Xmx8G']

  testLogging {
    // Show stack traces for all test events
    events 'failed'
  }

  useJUnitPlatform {
    excludeTags 'slow' // TODO: Enable the slow tests when needed
  }

  finalizedBy(tasks.jacocoTestReport)
}

dependencies {
  testImplementation("org.junit.jupiter:junit-jupiter:5.10.2")
  testImplementation("org.junit.jupiter:junit-jupiter-params:5.10.2")
  implementation "org.openjdk.jmh:jmh-core:1.33"
  implementation "org.openjdk.jmh:jmh-generator-annprocess:1.33"
  implementation 'it.unimi.dsi:fastutil:8.5.13'
}

jacocoTestReport {
  reports {
    xml.required.set(false)
    csv.required.set(false)
    html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
  }
  dependsOn(tasks.test)
}

spotless {
  // optional: limit format enforcement to just the files changed by this feature branch
  // ratchetFrom 'origin/main'

  format 'misc', {
    // define the files to apply `misc` to
    target '*.gradle', '*.md', '.gitignore'

    // define the steps to apply to those files
    trimTrailingWhitespace()
    indentWithSpaces(2) // or spaces. Takes an integer argument if you don't like 4
    endWithNewline()
  }

  java {
    // Use the default importOrder configuration
    importOrder()
    removeUnusedImports()

    // Cleanthat will refactor your code, but it may break your style: apply it before your formatter
    cleanthat() // has its own section below

    // Choose one of these formatters.
    // googleJavaFormat().aosp()
    palantirJavaFormat()
    // palantirJavaFormat('2.9.0').style("GOOGLE")clipse()

    // prettier()
    // clangFormat()

    formatAnnotations()  // fixes formatting of type annotations, see below
  }
}

jar {
  manifest {
    attributes(
      "Manifest-Version": "1.0",
      "Main-Class": "rosemary.Program"
      )
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  duplicatesStrategy = 'exclude' // Or 'warn', 'fail', etc. depending on your preference
}
